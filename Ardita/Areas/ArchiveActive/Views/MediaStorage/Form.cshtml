@using Ardita.Extensions;
@using Ardita.Models.ViewModels;
@model Ardita.Models.DbModels.TrxMediaStorage;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = GlobalConst.ViewStart;
    FormModel form = Html.Form();

    bool isEditable = false;
    if (form.CurrentAction == GlobalConst.Add || form.CurrentAction == GlobalConst.Update)
    {
        isEditable = true;
    }
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>Media Storage</h2>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Action(GlobalConst.Index, GlobalConst.Home, new {Area = GlobalConst.General})"><i class="fa fa-home"></i></a>
            </li>
            <li class="breadcrumb-item">
                Archive Active
            </li>
            <li class="breadcrumb-item">
                <a href="@Url.Action(GlobalConst.Index, GlobalConst.MediaStorage, new {Area = GlobalConst.ArchiveActive})">Media Storage</a>
            </li>
            <li class="active breadcrumb-item">
                <strong>@form.LastBreadcrumb</strong>
            </li>
        </ol>
    </div>
    <div class="col-lg-2">
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox ">
                <div class="ibox-title">
                    <h5>Page</h5>
                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                        <a class="dropdown-toggle" data-toggle="dropdown" href="form_basic.html#">
                            <i class="fa fa-wrench"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-user">
                            <li>
                                <a href="form_basic.html#" class="dropdown-item">Config option 1</a>
                            </li>
                            <li>
                                <a href="form_basic.html#" class="dropdown-item">Config option 2</a>
                            </li>
                        </ul>
                        <a class="close-link">
                            <i class="fa fa-times"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">
                    <div class="row">
                        <div class="col-sm-12">
                            <form role="form" id="formInput" enctype="multipart/form-data" asp-controller="@form.CurrentController" asp-area="@form.CurrentArea" asp-action="@form.FormAction">
                                <div class="row">
                                    <div class="col-sm-6 b-r">
                                        <div class="form-group">
                                            <div class="form-group">
                                                <label>Media Storage Code</label>
                                                <input type="text" asp-for="MediaStorageCode" id="txtMediaStorageCode" class="form-control" />
                                                <input type="hidden" asp-for="StatusId" id="txtStatusId" />
                                                <input type="hidden" asp-for="MediaStorageId" value="@Model.MediaStorageId">
                                            </div>
                                            <div class="form-group">
                                                <label>Media Storage Name</label>
                                                <input type="text" asp-for="MediaStorageName" id="txtMediaStorageName" class="form-control" />
                                            </div>
                                            <div class="form-group">
                                                <label>Archive Unit</label>
                                                <select asp-for="TypeStorage.ArchiveUnitId" asp-items="ViewBag.listArchiveUnit" (form.isInput ? GlobalConst.Required : GlobalConst.Disabled)
                                                        id="txtArchiveUnitId" class="select2_demo_1 form-control"
                                                        data-placeholder="-- Select Archive Unit --">
                                                    <option value=""></option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label>Type Storage</label>
                                                <select asp-items="ViewBag.listTypeStorage" (form.isInput ? GlobalConst.Required : GlobalConst.Disabled)
                                                        id="txtTypeStorageId" class="select2_demo_1 form-control" asp-for="TypeStorageId"
                                                        data-placeholder="-- Select Type Storage --">
                                                    <option value=""></option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label>Total Volume</label>
                                                <input type="text" asp-for="TotalVolume" id="txtTotalVolume" class="form-control" readonly />
                                            </div>
                                            <div class="form-group">
                                                <label>Difference Volume</label>
                                                <input type="text" asp-for="DifferenceVolume" id="txtDifferenceVolume" class="form-control" readonly />
                                            </div>
                                            <div class="form-group">
                                                <label>Floor</label>
                                                <select asp-for="Row!.Level!.Rack!.Room!.FloorId!" asp-items="ViewBag.listFloor" (form.isInput ? GlobalConst.Required : GlobalConst.Disabled)
                                                        id="txtFloorId" class="select2_demo_1 form-control m-1"
                                                        data-placeholder="-- Select Floor --">
                                                    <option value=""></option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label>Room</label>
                                                <select asp-for="Row!.Level!.Rack!.RoomId!" asp-items="ViewBag.listRoom" (form.isInput ? GlobalConst.Required : GlobalConst.Disabled)
                                                        id="txtRoomId" class="select2_demo_1 form-control"
                                                        data-placeholder="-- Select Room --">
                                                    <option value=""></option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label>Rack</label>
                                                <select asp-for="Row!.Level!.RackId!" asp-items="ViewBag.listRack" (form.isInput ? GlobalConst.Required : GlobalConst.Disabled)
                                                        id="txtRackId" class="select2_demo_1 form-control"
                                                        data-placeholder="-- Select Rack --">
                                                    <option value=""></option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label>Level</label>
                                                <select asp-for="Row.LevelId" asp-items="ViewBag.listLevel" (form.isInput ? GlobalConst.Required : GlobalConst.Disabled)
                                                        id="txtLevelId" class="select2_demo_1 form-control"
                                                        data-placeholder="-- Select Level --">
                                                    <option value=""></option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label>Row</label>
                                                <select asp-for="RowId" asp-items="ViewBag.listRow" (form.isInput ? GlobalConst.Required : GlobalConst.Disabled)
                                                        id="txtRowId" asp-for="RowId" class="select2_demo_1 form-control"
                                                        data-placeholder="-- Select Row --">
                                                    <option value=""></option>
                                                </select>
                                            </div>
                                            <div>
                                                @if (form.CurrentAction == GlobalConst.Detail)
                                                {
                                                    <a href="@Url.Action(GlobalConst.Index, form.CurrentController, new { Area = form.CurrentArea })"
                                                       class="btn btn-sm btn-default float-right m-t-n-xs">
                                                        Cancel
                                                    </a>
                                                }
                                                else if (form.CurrentAction == GlobalConst.Remove)
                                                {
                                                    <a href="@Url.Action(GlobalConst.Index, form.CurrentController, new { Area = form.CurrentArea })"
                                                       class="btn btn-sm btn-default float-right m-t-n-xs">
                                                        Cancel
                                                    </a>
                                                    <button onclick="onSubmit(this, event, 'submit');"
                                                            class="btn btn-sm @form.ButtonSubmitClass float-right m-t-n-xs mr-1"
                                                            type="submit" id="btn-submit">
                                                        Delete
                                                    </button>
                                                }
                                                else
                                                {
                                                    <a href="@Url.Action(GlobalConst.Index, form.CurrentController, new { Area = form.CurrentArea })"
                                                       class="btn btn-sm btn-default float-right m-t-n-xs">
                                                        Cancel
                                                    </a>
                                                    <button onclick="onSubmit(this, event, 'draft');"
                                                            class="btn btn-sm btn-warning float-right m-t-n-xs mr-1"
                                                            type="submit" id="btn-submit">
                                                        Save As Draft
                                                    </button>
                                                    <button onclick="onSubmit(this, event, 'submit');"
                                                            class="btn btn-sm @form.ButtonSubmitClass float-right m-t-n-xs mr-1"
                                                            type="submit" id="btn-submit">
                                                        Submit
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">

                                        @if (isEditable)
                                        {
                                            <div class="form-group">
                                                <label>Sub Subject Classifications</label>
                                                <select asp-items="ViewBag.listSubSubject" (form.isInput ? GlobalConst.Required : GlobalConst.Disabled)
                                                        id="txtSubSubjectClassificationId" class="select2_demo_1 form-control"
                                                        data-placeholder="-- Select Sub Subject Classification --">
                                                    <option value=""></option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label>Archive</label>
                                                <select id="txtArchiveId"
                                                        class="select2_demo_1 form-control @Html.Raw(form.isInput ? GlobalConst.Required : GlobalConst.Disabled)"
                                                    asp-items="ViewBag.listArchive"
                                                        data-placeholder="-- Select Archive --">
                                                    <option value=""></option>
                                                </select>
                                            </div>

                                            <button class="btn btn-success btn-sm pull-right mb-5"
                                                    type="button" id="add-archive">
                                                <i class="fa fa-plus"></i> Add Archive
                                            </button>
                                        }
                                        <table id="table-archive" class="table table-condensed" style="border-radius: unset;width:100%">
                                            <thead>
                                                <tr>
                                                    <th>Archive Type</th>
                                                    <th>Archive Title</th>
                                                    <th>Archive Creator</th>
                                                    <th>Volume</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody id="listdtl">
                                            </tbody>
                                        </table>
                                        <div id="listArchiveId"></div> @*this div for containing list archive id values send to controller*@
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script type="text/javascript">
        var listArchiveId = [];
        var totalCurrentVolume = 0;

        $(document).ready(function () {
            initForms("@form.CurrentAction");
            initDropdown();
            resetTableArchive();

            $('#txtTotalVolume').prop('readonly', true);
            $('#txtDifferenceVolume').prop('readonly', true);

            $('#txtTypeStorageId').on('change', function () {
                if ($(this).val() != '') {
                    getTypeStorageById($('#txtTypeStorageId').val());
                    resetTableArchive();
                }
            });

            $("#add-archive").click(function () {
                addArchive();
            });

            if ("@form.CurrentAction" != "@GlobalConst.Add") {
                initTableArchive();
            }

        });

        function initDropdown() {
            $('#txtSubSubjectClassificationId').on('change', function () {
                $('#txtArchiveId').val('').trigger('change');
            });
            $('#txtArchiveId').select2({
                theme: 'bootstrap4',
                allowClear: true,
                placeholder: '-- Select Archive --',
                ajax: {
                    url: '@Url.Action(GlobalConst.BindArchivesBySubSubjectClassificationId, GlobalConst.MediaStorage, new { Area = GlobalConst.ArchiveActive })',
                    type: "POST",
                    data: function (params) {
                        var query = {
                            id: $('#txtSubSubjectClassificationId').val(),
                        }
                        return query;
                    },
                    processResults: function (data) {
                        var dataResult = $.map(data, function (item) {
                            return {
                                text: item.titleArchive,
                                id: item.archiveId
                            }
                        });
                        return {
                            results: dataResult
                        };
                    }
                }
            });

            $('#txtArchiveUnitId').on('change', function () {
                $('#txtTypeStorageId').val('').trigger('change');
                $('#txtFloorId').val('').trigger('change');
                $("#listdtl").empty();
                listArchiveId = [];
                $("#txtTotalVolume").val(0);
                $("#txtDifferenceVolume").val(0);
            });
            $('#txtTypeStorageId').select2({
                theme: 'bootstrap4',
                allowClear: true,
                placeholder: '-- Select Type Storage --',
                ajax: {
                    url: '@Url.Action(GlobalConst.BindTypeStorageByArchiveUnitId, GlobalConst.MediaStorage, new { Area = GlobalConst.ArchiveActive })',
                    type: "POST",
                    data: function (params) {
                        var query = {
                            id: $('#txtArchiveUnitId').val(),
                        }
                        return query;
                    },
                    processResults: function (data) {
                        var dataResult = $.map(data, function (item) {

                            return {
                                text: item.typeStorageName,
                                id: item.typeStorageId
                            }
                        });
                        return {
                            results: dataResult
                        };
                    }
                }
            });
            $('#txtFloorId').select2({
                theme: 'bootstrap4',
                allowClear: true,
                placeholder: '-- Select Floor --',
                ajax: {
                    url: '@Url.Action(GlobalConst.BindFloorsByArchiveUnitId, GlobalConst.MediaStorage, new { Area = GlobalConst.ArchiveActive })',
                    type: "POST",
                    data: function (params) {
                        var query = {
                            id: $('#txtArchiveUnitId').val(),
                        }
                        return query;
                    },
                    processResults: function (data) {
                        var dataResult = $.map(data, function (item) {
                            return {
                                text: item.floorName,
                                id: item.floorId
                            }
                        });
                        return {
                            results: dataResult
                        };
                    }
                }
            });

            $('#txtFloorId').on('change', function () {
                $('#txtRoomId').val('').trigger('change');
            });
            $('#txtRoomId').select2({
                theme: 'bootstrap4',
                allowClear: true,
                placeholder: '-- Select Floor --',
                ajax: {
                    url: '@Url.Action(GlobalConst.BindRoomByFloorId, GlobalConst.MediaStorage, new { Area = GlobalConst.ArchiveActive })',
                    type: "POST",
                    data: function (params) {
                        var query = {
                            id: $('#txtFloorId').val(),
                        }
                        return query;
                    },
                    processResults: function (data) {
                        var dataResult = $.map(data, function (item) {
                            return {
                                text: item.roomName,
                                id: item.roomId
                            }
                        });
                        return {
                            results: dataResult
                        };
                    }
                }
            });

            $('#txtRoomId').on('change', function () {
                $('#txtRackId').val('').trigger('change');
            });
            $('#txtRackId').select2({
                theme: 'bootstrap4',
                allowClear: true,
                placeholder: '-- Select Floor --',
                ajax: {
                    url: '@Url.Action(GlobalConst.BindRackByRoomId, GlobalConst.MediaStorage, new { Area = GlobalConst.ArchiveActive })',
                    type: "POST",
                    data: function (params) {
                        var query = {
                            id: $('#txtRoomId').val(),
                        }
                        return query;
                    },
                    processResults: function (data) {
                        var dataResult = $.map(data, function (item) {
                            return {
                                text: item.rackName,
                                id: item.rackId
                            }
                        });
                        return {
                            results: dataResult
                        };
                    }
                }
            });

            $('#txtRackId').on('change', function () {
                $('#txtLevelId').val('').trigger('change');
            });
            $('#txtLevelId').select2({
                theme: 'bootstrap4',
                allowClear: true,
                placeholder: '-- Select Floor --',
                ajax: {
                    url: '@Url.Action(GlobalConst.BindLevelByRackId, GlobalConst.MediaStorage, new { Area = GlobalConst.ArchiveActive })',
                    type: "POST",
                    data: function (params) {
                        var query = {
                            id: $('#txtRackId').val(),
                        }
                        return query;
                    },
                    processResults: function (data) {
                        var dataResult = $.map(data, function (item) {
                            return {
                                text: item.levelName,
                                id: item.levelId
                            }
                        });
                        return {
                            results: dataResult
                        };
                    }
                }
            });

            $('#txtLevelId').on('change', function () {
                $('#txtRowId').val('').trigger('change');
            });
            $('#txtRowId').select2({
                theme: 'bootstrap4',
                allowClear: true,
                placeholder: '-- Select Floor --',
                ajax: {
                    url: '@Url.Action(GlobalConst.BindRowByLevelId, GlobalConst.MediaStorage, new { Area = GlobalConst.ArchiveActive })',
                    type: "POST",
                    data: function (params) {
                        var query = {
                            id: $('#txtLevelId').val(),
                        }
                        return query;
                    },
                    processResults: function (data) {
                        var dataResult = $.map(data, function (item) {
                            return {
                                text: item.rowName,
                                id: item.rowId
                            }
                        });
                        return {
                            results: dataResult
                        };
                    }
                }
            });
        }

        function initListArchive(archiveId, volume, typeArchive, titleArchive, archiveCreator, isEdit) {
            var remove = `<a onclick ="deleteArchive($(this), '-1', '-2')" class="btn btn-sm btn-default btn-delete-archive" id="-1")><i class="fa fa-trash"></i> </a>`;
            var view = `<a id="btn-view-archive" href="@Url.Action(GlobalConst.Detail, GlobalConst.Archive, new { Area = GlobalConst.ArchiveActive, Id = -1 })" class="btn btn-sm btn-warning" id="-1")><i class="fa fa-eye"></i> </a>`;

            listArchiveId.push(archiveId);
            remove = remove.replace("-1", archiveId);
            remove = remove.replace("-2", volume);
            view = view.replace("-1", archiveId);

            $('#table-archive > tbody:last-child').append(`<tr id=${archiveId}><td> ${typeArchive} </td><td> ${titleArchive} </td><td> ${archiveCreator} </td><td> ${volume} </td><td> ${remove} ${view}</td></tr>`);

            if (isEdit == false) {
                $("#txtDifferenceVolume").val($("#txtDifferenceVolume").val() - volume);
            }
        }

        function addArchive() {
            var id = $('#txtArchiveId').val();
            var typeStorageId = $('#txtTypeStorageId').val();
            var url = '@Url.Action("BindArchiveById", form.CurrentController, new { Area = form.CurrentArea })';

            if (typeStorageId == "") {
                swal({
                    title: "Type Storage Not Found!",
                    text: "Please Select Type Storage First",
                    showConfirmButton: true,
                    allowOutsideClick: false,
                    type: "warning"
                });

                return false;
            }

            if (id == "") {
                swal({
                    title: "Data Not Completed!",
                    text: "Please Select Sub Subject Classification and Archive First!",
                    showConfirmButton: true,
                    allowOutsideClick: false,
                    type: "warning"
                });

                return false;
            }

            if (validateArchive(id) == true) {
                swal({
                    title: "Please Wait",
                    text: "Insert Data In Progress",
                    showConfirmButton: false,
                    allowOutsideClick: false,
                    icon: "~/img/bks.png"
                });

                $.ajax({
                    url: url,
                    type: "@GlobalConst.GET",
                    data: { Id: id },
                    dataType: "@GlobalConst.JSON",
                    contentType: "@GlobalConst.APPLICATIONJSON",
                    success: function (data) {
                        if ($("#txtDifferenceVolume").val() <= data.volume) {
                            swal({
                                title: "Volume Is Full",
                                text: "Please Select Another Archives With Minimun Volume",
                                showConfirmButton: true,
                                allowOutsideClick: false,
                                type: "warning"
                            });

                            return false;
                        }
                        initListArchive(data.archiveId, data.volume, data.typeArchive, data.titleArchive, data.archiveCreator, false);
                        swal({
                            title: "Success",
                            type: "success",
                            timer: 1000
                        });
                    },
                    error: function () {
                        swal({
                            title: "Data Not Found",
                            text: "Data Archive Not Found! Call Administrator",
                            showConfirmButton: true,
                            allowOutsideClick: false,
                            type: "warning"
                        });
                    }
                });
            }
            else {
                swal({
                    title: "Duplicated",
                    text: "The Archive Has Been Inserted, Please Select Another",
                    showConfirmButton: true,
                    allowOutsideClick: false,
                    type: "warning"
                });
            }
        }

        function initTableArchive() {
            resetTableArchive();

            @foreach (var d in Model.TrxMediaStorageDetails)
            {
                //@:initListArchive("@d.ArchiveId", "@d.Archive.Volume", "@d.Archive.TypeArchive", "@d.Archive.TitleArchive", "@d.Archive.SubSubjectClassification.Creator.CreatorName", true);

            }
            
            initBtnDeleteArchive();
        }

        function getTypeStorageById(id) {
            var url = '@Url.Action(GlobalConst.BindTypeStorageById, form.CurrentController, new { Area = form.CurrentArea })';
            $.ajax({
                url: url,
                type: "@GlobalConst.GET",
                data: { Id: id },
                dataType: "@GlobalConst.JSON",
                contentType: "@GlobalConst.APPLICATIONJSON",
                success: function (data) {
                    $("#txtTotalVolume").val(data.volume);
                    $("#txtDifferenceVolume").val(data.volume);
                },
                error: function () {
                    alert("Type Storage Found");
                }
            });
        }

        function deleteArchive(row, id, volume) {
            var index = listArchiveId.indexOf(id);
            if (index >= 0) {
                listArchiveId.splice(index, 1);
            }
            row.closest('tr').remove();

            $("#txtDifferenceVolume").val(parseInt($("#txtDifferenceVolume").val()) + parseInt(volume));
        }

        function validateArchive(archiveId) {
            for (i in listArchiveId) {
                if (listArchiveId[i] == archiveId) {
                    return false;
                }
            }
            return true;
        }

        function validate() {
            let result = true;
            if (listArchiveId.length == 0) {
                swal("Please input Archive!");
                result = false;
            }
            if ($('#txtRowId').val() == "") {
                swal("Please select Row!");
                result = false;
            }
            if ($('#txtDifferenceVolume').val() == "") {
                swal("Please enter Difference Volume!");
                result = false;
            }
            if ($('#txtTotalVolume').val() == "") {
                swal("Please enter Total Volume!");
                result = false;
            }
            if ($('#txtTypeStorageId').val() == "") {
                swal("Please select Type Storage!");
                result = false;
            }
            if ($('#txtArchiveUnitId').val() == "") {
                swal("Please select Archive Unit!");
                result = false;
            }
            if ($('#txtMediaStorageName').val() == "") {
                swal("Please enter Media Storage Name!");
                result = false;
            }
            if ($('#txtMediaStorageCode').val() == "") {
                swal("Please enter Media Storage Code!");
                result = false;
            }
            return result;
        }

        function initBtnDeleteArchive() {
            $(".btn-delete-archive").show();
            if ("@isEditable" === "False") {
                $(".btn-delete-archive").hide();
            }
        }

        function resetTableArchive() {
            $("#listdtl").empty();
            listArchiveId = [];
        }

        function getStatusSubmit(status) {
            $("#txtStatusId").val("1");
            if (status == "submit") {
                $("#txtStatusId").val("5");
            }
        }

        function onSubmit(ctl, event, status) {
            listArchiveId.forEach((element) => {
                $("#listArchiveId").append(`<input name=detail[] type=hidden value=${element} >`);
            });

            console.table(listArchiveId);

            getStatusSubmit(status);

            event.preventDefault();
            swal({
                title: "Do You Want To " + "@form.CurrentAction" + " It?",
                text: "Please check Information before Submiting!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Save",
                cancelButtonText: "Cancel",
                closeOnConfirm: false,
                closeOnCancel: false
            },
                function (isConfirm) {
                    if (isConfirm) {
                        if (validate() == true) {
                            $('.confirm').prop('disabled', true);
                            $('.cancel').prop('disabled', true);
                            $('.cancel').hide();
                            $("#formInput").submit();
                        }
                    } else {
                        swal("Cancelled", "You have Cancelled Form Submission!", "error");
                    }
                });
        }
    </script>
}